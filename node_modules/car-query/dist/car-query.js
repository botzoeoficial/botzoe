"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CarQuery = void 0;
var axios_1 = require("axios");
var CARQUERY_API_URL = 'https://www.carqueryapi.com/api/0.3/';
var CarQuery = /** @class */ (function () {
    function CarQuery() {
        this.config = {
            baseURL: CARQUERY_API_URL
        };
    }
    CarQuery.prototype.getYears = function () {
        return __awaiter(this, void 0, void 0, function () {
            var response, years;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.config.params = {
                            cmd: 'getYears'
                        };
                        return [4 /*yield*/, axios_1.default.request(this.config)];
                    case 1:
                        response = _a.sent();
                        years = {
                            minYear: Number(response.data.Years.min_year),
                            maxYear: Number(response.data.Years.max_year),
                        };
                        return [2 /*return*/, Promise.resolve(years)];
                }
            });
        });
    };
    CarQuery.prototype.getMakes = function (year, soldInUSA) {
        return __awaiter(this, void 0, void 0, function () {
            var response, makes;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.config.params = {
                            cmd: 'getMakes',
                            year: year
                        };
                        if (soldInUSA) {
                            Object.assign(this.config.params, { sold_in_us: 1 });
                        }
                        return [4 /*yield*/, axios_1.default.request(this.config)];
                    case 1:
                        response = _a.sent();
                        makes = response.data.Makes.map(function (make) {
                            return {
                                id: make.make_id,
                                display: make.make_display,
                                isCommon: make.make_is_common == '1',
                                country: make.make_country
                            };
                        });
                        return [2 /*return*/, Promise.resolve(makes)];
                }
            });
        });
    };
    CarQuery.prototype.getModels = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var response, models;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.config.params = {
                            cmd: 'getModels',
                            year: params.year,
                            make: params.make
                        };
                        if (params.soldInUSA) {
                            Object.assign(this.config.params, { sold_in_us: 1 });
                        }
                        if (params.body) {
                            Object.assign(this.config.params, { body: params.body });
                        }
                        return [4 /*yield*/, axios_1.default.request(this.config)];
                    case 1:
                        response = _a.sent();
                        models = response.data.Models.map(function (model) {
                            return {
                                makeId: model.model_make_id,
                                name: model.model_name
                            };
                        });
                        return [2 /*return*/, Promise.resolve(models)];
                }
            });
        });
    };
    CarQuery.prototype.getTrims = function (params) {
        return __awaiter(this, void 0, void 0, function () {
            var response, trims;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.config.params = {
                            cmd: 'getTrims'
                        };
                        this.buildGetTrimsQueryString(params);
                        return [4 /*yield*/, axios_1.default.request(this.config)];
                    case 1:
                        response = _a.sent();
                        trims = response.data.Trims.map(function (trim) {
                            return _this.mapToTrim(trim);
                        });
                        return [2 /*return*/, Promise.resolve(trims)];
                }
            });
        });
    };
    CarQuery.prototype.buildGetTrimsQueryString = function (params) {
        if (params.year) {
            Object.assign(this.config.params, { year: params.year });
        }
        if (params.make) {
            Object.assign(this.config.params, { make: params.make });
        }
        if (params.model) {
            Object.assign(this.config.params, { model: params.model });
        }
        if (params.bodyStyle) {
            Object.assign(this.config.params, { body: params.bodyStyle });
        }
        if (params.doors) {
            Object.assign(this.config.params, { doors: params.doors });
        }
        if (params.drive) {
            Object.assign(this.config.params, { drive: params.drive });
        }
        if (params.enginePosition) {
            Object.assign(this.config.params, { engine_position: params.enginePosition });
        }
        if (params.engineType) {
            Object.assign(this.config.params, { engine_type: params.engineType });
        }
        if (params.fuelType) {
            Object.assign(this.config.params, { fuel_type: params.fuelType });
        }
        if (params.fullResults) {
            Object.assign(this.config.params, { full_results: 1 });
        }
        if (params.keyword) {
            Object.assign(this.config.params, { keyword: params.keyword });
        }
        if (params.minCylinders) {
            Object.assign(this.config.params, { min_cylinders: params.minCylinders });
        }
        if (params.minFuelEfficiencyHighwayInLitresPer100Kilometer) {
            Object.assign(this.config.params, { min_lkm_hwy: params.minFuelEfficiencyHighwayInLitresPer100Kilometer });
        }
        if (params.minHorsepower) {
            Object.assign(this.config.params, { min_power: params.minHorsepower });
        }
        if (params.minTopSpeedKilometerPerHour) {
            Object.assign(this.config.params, { min_top_speed: params.minTopSpeedKilometerPerHour });
        }
        if (params.minTorqueNewtonMetre) {
            Object.assign(this.config.params, { min_torque: params.minTorqueNewtonMetre });
        }
        if (params.minWeightInKilogram) {
            Object.assign(this.config.params, { min_weight: params.minWeightInKilogram });
        }
        if (params.minYear) {
            Object.assign(this.config.params, { min_year: params.minYear });
        }
        if (params.maxCylinders) {
            Object.assign(this.config.params, { max_cylinders: params.maxCylinders });
        }
        if (params.maxFuelEfficiencyHighwayInLitresPer100Kilometer) {
            Object.assign(this.config.params, { max_lkm_hwy: params.maxFuelEfficiencyHighwayInLitresPer100Kilometer });
        }
        if (params.maxHorsepower) {
            Object.assign(this.config.params, { max_power: params.maxHorsepower });
        }
        if (params.maxTopSpeedKilometerPerHour) {
            Object.assign(this.config.params, { max_top_speed: params.maxTopSpeedKilometerPerHour });
        }
        if (params.maxTorqueNewtonMetre) {
            Object.assign(this.config.params, { max_torque: params.maxTorqueNewtonMetre });
        }
        if (params.maxWeightInKilograms) {
            Object.assign(this.config.params, { max_weight: params.maxWeightInKilograms });
        }
        if (params.maxYear) {
            Object.assign(this.config.params, { max_year: params.maxYear });
        }
        if (params.seats) {
            Object.assign(this.config.params, { seats: params.seats });
        }
        if (params.soldInUSA) {
            Object.assign(this.config.params, { sold_in_us: 1 });
        }
    };
    CarQuery.prototype.mapToTrim = function (trim) {
        return {
            modelId: trim.model_id,
            makeId: trim.model_make_id,
            name: trim.model_name,
            trim: trim.model_trim,
            year: Number(trim.model_year),
            body: trim.model_body,
            enginePosition: trim.model_engine_position,
            engineCC: Number(trim.model_engine_cc),
            engineCylinders: Number(trim.model_engine_cyl),
            engineType: trim.model_engine_type,
            engineValvesPerCylinder: Number(trim.model_engine_valves_per_cyl),
            engineHorsepower: Number(trim.model_engine_power_ps),
            enginePowerRPM: Number(trim.model_engine_power_rpm),
            engineTorqueNewtonMetre: Number(trim.model_engine_torque_nm),
            engineTorqueRPM: Number(trim.model_engine_torque_rpm),
            engineBoreMM: Number(trim.model_engine_bore_mm),
            engineStrokeMM: Number(trim.model_engine_stroke_mm),
            engineCompression: trim.model_engine_compression,
            engineFuel: trim.model_engine_fuel,
            topSpeedKilometerPerHour: Number(trim.model_top_speed_kph),
            zeroTo100KilometerPerHour: Number(trim.model_0_to_100_kph),
            drive: trim.model_drive,
            transmissionType: trim.model_transmission_type,
            seats: Number(trim.model_seats),
            doors: Number(trim.model_doors),
            weightKiloGrams: Number(trim.model_weight_kg),
            lengthMM: Number(trim.model_length_mm),
            widthMM: Number(trim.model_width_mm),
            heightMM: Number(trim.model_height_mm),
            wheelbaseMM: Number(trim.model_wheelbase_mm),
            litresPer100KilometerHighway: Number(trim.model_lkm_hwy),
            litresPer100KilometerMixed: Number(trim.model_lkm_mixed),
            litresPer100KilometerCity: Number(trim.model_lkm_city),
            fuelCapacityLiters: Number(trim.model_fuel_cap_l),
            soldInUSA: trim.model_sold_in_us === '1',
            co2: trim.model_co2,
            make: trim.model_make_display,
            display: trim.make_display,
            country: trim.make_country
        };
    };
    CarQuery.prototype.getModelDetail = function (modelId) {
        return __awaiter(this, void 0, void 0, function () {
            var response, detail, modelDetail;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.config.params = {
                            cmd: 'getModel',
                            model: modelId
                        };
                        return [4 /*yield*/, axios_1.default.request(this.config)];
                    case 1:
                        response = _a.sent();
                        detail = response.data[0];
                        modelDetail = {
                            modelId: Number(detail.model_id),
                            makeId: detail.model_make_id,
                            modelName: detail.model_name,
                            trim: detail.model_trim,
                            year: Number(detail.model_year),
                            body: detail.model_body,
                            enginePosition: detail.model_engine_position,
                            engineCC: Number(detail.model_engine_cc),
                            engineCylinders: Number(detail.model_engine_cyl),
                            engineType: detail.model_engine_type,
                            engineValvesPerCylinder: Number(detail.model_engine_valves_per_cyl),
                            engineHoresepower: Number(detail.model_engine_power_ps),
                            enginePowerRPM: Number(detail.model_engine_power_rpm),
                            engineTorqueNewtonMetre: Number(detail.model_engine_torque_nm),
                            engineTorqueRPM: Number(detail.model_engine_torque_rpm),
                            engineBoreMM: Number(detail.model_engine_bore_mm),
                            engineStrokeMM: Number(detail.model_engine_stroke_mm),
                            engineCompression: detail.model_engine_compression,
                            engineFuel: detail.model_engine_fuel,
                            topSpeedKilometerPerHour: Number(detail.model_top_speed_kph),
                            zeroTo100KilometerPerHour: Number(detail.model_0_to_100_kph),
                            drive: detail.model_drive,
                            transmissionType: detail.model_transmission_type,
                            seats: Number(detail.model_seats),
                            doors: Number(detail.model_doors),
                            weightKilograms: Number(detail.model_weight_kg),
                            lengthMM: Number(detail.model_length_mm),
                            widthMM: Number(detail.model_width_mm),
                            heightMM: Number(detail.model_height_mm),
                            wheelbaseMM: Number(detail.model_wheelbase_mm),
                            litresPer100KilometerHighway: Number(detail.model_lkm_hwy),
                            litresPer100KilometerMixed: Number(detail.model_lkm_mixed),
                            litresPer100KilometerCity: Number(detail.model_lkm_city),
                            fuelCapacityLiters: Number(detail.model_fuel_cap_l),
                            soldInUSA: detail.model_sold_in_us === '1',
                            engineLiters: Number(detail.model_engine_l),
                            engineCubicInches: Number(detail.model_engine_ci),
                            engineValves: Number(detail.model_engine_valves),
                            engineHorsepower: Number(detail.model_engine_power_hp),
                            enginePowerKW: Number(detail.model_engine_power_kw),
                            engineTorquePoundFoot: Number(detail.model_engine_torque_lbft),
                            engineTorqueKilogram: Number(detail.model_engine_torque_kgm),
                            topSpeedMilesPerHour: Number(detail.model_top_speed_mph),
                            weightPounds: Number(detail.model_weight_lbs),
                            lengthInches: Number(detail.model_length_in),
                            widthInches: Number(detail.model_width_in),
                            heightInches: Number(detail.model_height_in),
                            wheelbaseInches: Number(detail.model_wheelbase_in),
                            milesPerGallonHighway: Number(detail.model_mpg_hwy),
                            milesPerGallonCity: Number(detail.model_mpg_city),
                            milesPerGallonMixed: Number(detail.model_mpg_mixed),
                            fuelCapacityGallons: Number(detail.model_fuel_cap_g),
                            makeDisplay: detail.make_display,
                            makeCountry: detail.make_country,
                            ExtColors: detail.ExtColors,
                            IntColors: detail.ExtColors,
                        };
                        return [2 /*return*/, Promise.resolve(modelDetail)];
                }
            });
        });
    };
    return CarQuery;
}());
exports.CarQuery = CarQuery;
//# sourceMappingURL=car-query.js.map